// https://www.gamedev.net/blogs/entry/2249317-a-guide-to-getting-started-with-boostasio/
// 6c

#define var decltype(auto)

#include "asio/io_service.hpp"
#include "asio/basic_waitable_timer.hpp"
#include "asio/strand.hpp"
#include <iostream>
#include <memory>
#include <thread>
#include <mutex>
#include <chrono>
#include <functional>

std::mutex coutMutex;
template<typename ...Args>
void Cout(Args const& ... args) {
	std::lock_guard<std::mutex> lg_mutex(coutMutex);
	std::initializer_list<int> n{ ((std::cout << args), 0)... };
	(void)(n);
}

template<typename ...Args>
void CoutT(Args const& ... args) {
	Cout("[", std::this_thread::get_id(), "] ", args...);
}

void WorkerThread(asio::io_service& io_service) {
	CoutT("thread start\n");

	while (true) {
		try {
			asio::error_code ec;
			io_service.run(ec);
			if (ec) {
				CoutT("asio error: ", ec, "\n");
			}
			break;
		}
		catch (std::exception& ex) {
			CoutT("exception: ", ex.what(), "\n");
		}
	}

	CoutT("thread finish\n");
}

typedef asio::basic_waitable_timer<std::chrono::system_clock> Timer;
void TimerHandler(asio::error_code const& err, Timer& timer, asio::io_service::strand& strand) {
	if (err) {
		CoutT("error: ", err);
	}
	else {
		CoutT("timerHandler.\n");
		timer.expires_from_now(std::chrono::seconds(1));
		timer.async_wait([&](auto const& e) { TimerHandler(e, timer, strand); });
	}
}

void PrintNum(int x) {
	CoutT("x: ", x, "\n");
	std::this_thread::sleep_for(std::chrono::seconds(1));
}

int main(int argc, char* argv[])
{
	asio::io_service ios;
	var work = std::make_shared<asio::io_service::work>(ios);
	asio::io_service::strand strand(ios);

	Cout("Press [return] to exit.\n");

	std::vector<std::thread> worker_threads;
	for (size_t i = 0; i < 2; i++)
	{
		worker_threads.emplace_back(std::bind(&::WorkerThread, std::ref(ios)));
	}

	std::this_thread::sleep_for(std::chrono::seconds(1));

	strand.post(std::bind(PrintNum, 1));
	strand.post(std::bind(PrintNum, 2));
	strand.post(std::bind(PrintNum, 3));
	strand.post(std::bind(PrintNum, 4));
	strand.post(std::bind(PrintNum, 5));

	Timer timer(ios);
	timer.expires_from_now(std::chrono::seconds(1));
	timer.async_wait(strand.wrap(std::bind(TimerHandler, std::placeholders::_1, std::ref(timer), std::ref(strand))));

	std::cin.get();
	ios.stop();

	for (var t : worker_threads) {
		t.join();
	}
	return 0;
}
