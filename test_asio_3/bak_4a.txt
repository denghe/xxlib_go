// https://www.gamedev.net/blogs/entry/2249317-a-guide-to-getting-started-with-boostasio/
// 4a

#define var decltype(auto)

#include "asio/io_service.hpp"
#include "asio/io_context_strand.hpp"
#include <iostream>
#include <memory>
#include <thread>
#include <mutex>
#include <chrono>

std::mutex coutMutex;
template<typename ...Args>
void Cout(Args const& ... args) {
	std::lock_guard<std::mutex> lg_mutex(coutMutex);
	std::initializer_list<int> n{ ((std::cout << args), 0)... };
	(void)(n);
}

template<typename ...Args>
void CoutT(Args const& ... args) {
	Cout("[", std::this_thread::get_id(), "] ", args...);
}

void WorkerThread(asio::io_service& io_service) {
	try {
		CoutT("thread start\n");
		io_service.run();
		CoutT("thread finish\n");
	}
	catch (std::exception& e) {
		CoutT(e.what(), "\n");
	}
}

void PrintNum(int x) {
	std::cout << "[" << std::this_thread::get_id() << "] x: " << x << std::endl;
}

int main(int argc, char* argv[])
{
	asio::io_service ios;
	try {
		var work = std::make_shared<asio::io_service::work>(ios);

		asio::io_service::strand strand(ios);

		Cout("The program will exit when all work has finished.\n");

		std::vector<std::thread> worker_threads;
		for (size_t i = 0; i < 2; i++)
		{
			worker_threads.emplace_back(std::bind(&::WorkerThread, std::ref(ios)));
		}

		std::this_thread::sleep_for(std::chrono::seconds(1));

		//strand.post(std::bind(&PrintNum, 1));
		//strand.post(std::bind(&PrintNum, 2));
		//strand.post(std::bind(&PrintNum, 3));
		//strand.post(std::bind(&PrintNum, 4));
		//strand.post(std::bind(&PrintNum, 5));

		ios.post(std::bind(&PrintNum, 1));
		ios.post(std::bind(&PrintNum, 2));
		ios.post(std::bind(&PrintNum, 3));
		ios.post(std::bind(&PrintNum, 4));
		ios.post(std::bind(&PrintNum, 5));

		work.reset();
		for (var t : worker_threads) {
			t.join();
		}
	}
	catch (std::exception& e) {
		Cout(e.what(), "\n");
	}
	return 0;
}
