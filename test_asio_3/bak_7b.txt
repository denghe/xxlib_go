// https://www.gamedev.net/blogs/entry/2249317-a-guide-to-getting-started-with-boostasio/
// 7b

#define var decltype(auto)

#include "asio/io_service.hpp"
#include "asio/basic_waitable_timer.hpp"
#include "asio/strand.hpp"
#include "asio/ip/tcp.hpp"
#include <iostream>
#include <memory>
#include <thread>
#include <mutex>
#include <chrono>
#include <functional>

std::mutex coutMutex;
template<typename ...Args>
void Cout(Args const& ... args) {
	std::lock_guard<std::mutex> lg_mutex(coutMutex);
	std::initializer_list<int> n{ ((std::cout << args), 0)... };
	(void)(n);
}

template<typename ...Args>
void CoutT(Args const& ... args) {
	Cout("[", std::this_thread::get_id(), "] ", args...);
}

void WorkerThread(asio::io_service& io_service) {
	CoutT("thread start\n");

	while (true) {
		try {
			asio::error_code ec;
			io_service.run(ec);
			if (ec) {
				CoutT("asio error: ", ec, "\n");
			}
			break;
		}
		catch (std::exception& ex) {
			CoutT("exception: ", ex.what(), "\n");
		}
	}

	CoutT("thread finish\n");
}

void OnConnect(asio::error_code const& ec, asio::ip::tcp::socket& sock) {
	if (ec) {
		CoutT("error: ", ec, "\n");
	}
	else {
		CoutT("connected!\n");
	}
}

int main(int argc, char* argv[])
{
	asio::io_service ios;
	var work = std::make_shared<asio::io_service::work>(ios);
	asio::io_service::strand strand(ios);
	Cout("Press [return] to exit.\n");

	std::vector<std::thread> worker_threads;
	for (size_t i = 0; i < 2; i++)
	{
		worker_threads.emplace_back(std::bind(&::WorkerThread, std::ref(ios)));
	}

	asio::ip::tcp::socket sock(ios);
	try {
		asio::ip::tcp::resolver resolver(ios);
		asio::ip::tcp::resolver::query query("www.baidu.com", "80");
		var iter = resolver.resolve(query);
		var endpoint = *iter;
		Cout("connect to ", endpoint.host_name(), ":", endpoint.service_name(), "\n");
		sock.async_connect(endpoint, [&](auto const&ec) { OnConnect(ec, sock); });
	}
	catch (std::exception& ex) {
		CoutT("exception: ", ex.what(), "\n");
	}

	std::cin.get();

	asio::error_code ec;
	sock.shutdown(asio::ip::tcp::socket::shutdown_both, ec);
	sock.close(ec);

	ios.stop();

	for (var t : worker_threads) {
		t.join();
	}
	return 0;
}
